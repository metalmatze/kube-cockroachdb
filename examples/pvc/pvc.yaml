apiVersion: v1
items:
- apiVersion: batch/v1
  kind: Job
  metadata:
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
    name: cockroachdb-example
    namespace: default
  spec:
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database
          app.kubernetes.io/instance: example
          app.kubernetes.io/name: cockroachdb-example
      spec:
        containers:
        - command:
          - /cockroach/cockroach
          - init
          - --insecure
          - --host=cockroachdb-example-0.cockroachdb-example.default
          image: cockroachdb/cockroach:v20.1.0
          name: cluster-init
        restartPolicy: OnFailure
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
    name: cockroachdb-example
    namespace: default
  spec:
    maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: example
        app.kubernetes.io/name: cockroachdb-example
- apiVersion: monitoring.coreos.com/v1
  kind: PrometheusRule
  metadata:
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
      prometheus: k8s
      role: alert-rules
    name: cockroachdb-example
    namespace: default
  spec:
    groups:
    - name: cockroachdb
      rules:
      - alert: CockroachInstanceFlapping
        annotations:
          message: '{{ $labels.instance }} for cluster {{ $labels.cluster }} restarted {{ $value }} time(s) in 10m'
        expr: |
          resets(cockroachdb_sys_uptime{namespace="default",service="cockroachdb-example"}[10m]) > 5
        for: 1m
        labels:
          severity: warning
      - alert: CockroachLivenessMismatch
        annotations:
          message: Liveness mismatch for {{ $labels.instance }}
        expr: |
          (cockroachdb_liveness_livenodes{namespace="default",service="cockroachdb-example"})
            !=
          ignoring(instance) group_left() (count by(cluster, job) (up{namespace="default",service="cockroachdb-example"} == 1))
        for: 5m
        labels:
          severity: warning
      - alert: CockroachVersionMismatch
        annotations:
          message: Cluster {{ $labels.cluster }} running {{ $value }} different versions
        expr: |
          count by(cluster) (count_values by(tag, cluster) ("version", cockroachdb_build_timestamp{namespace="default",service="cockroachdb-example"})) > 1
        for: 1h
        labels:
          severity: warning
      - alert: CockroachStoreDiskLow
        annotations:
          message: Store {{ $labels.store }} on node {{ $labels.instance }} at {{ $value }} available disk fraction
        expr: |
          :cockroachdb_capacity_available:ratio{namespace="default",service="cockroachdb-example"} < 0.15
        for: 30m
        labels:
          severity: critical
      - alert: CockroachClusterDiskLow
        annotations:
          message: Cluster {{ $labels.cluster }} at {{ $value }} available disk fraction
        expr: |
          cluster:cockroachdb_capacity_available:ratio{namespace="default",service="cockroachdb-example"} < 0.2
        for: 30m
        labels:
          severity: critical
      - alert: CockroachUnavailableRanges
        annotations:
          message: Instance {{ $labels.instance }} has {{ $value }} unavailable ranges
        expr: |
          (sum by(instance, cluster) (cockroachdb_ranges_unavailable{namespace="default",service="cockroachdb-example"})) > 0
        for: 10m
        labels:
          severity: critical
      - alert: CockroachNoLeaseRanges
        annotations:
          message: Instance {{ $labels.instance }} has {{ $value }} ranges without leases
        expr: |
          (sum by(instance, cluster) (cockroachdb_replicas_leaders_not_leaseholders{namespace="default",service="cockroachdb-example"})) > 0
        for: 10m
        labels:
          severity: warning
      - alert: CockroachHighOpenFDCount
        annotations:
          message: 'Too many open file descriptors on {{ $labels.instance }}: {{ $value }} fraction used'
        expr: |
          cockroachdb_sys_fd_open{namespace="default",service="cockroachdb-example"} / cockroachdb_sys_fd_softlimit{namespace="default",service="cockroachdb-example"} > 0.8
        for: 10m
        labels:
          severity: warning
    - name: cockroachdb.rules
      rules:
      - expr: |
          sum without(store) (cockroachdb_capacity{namespace="default",service="cockroachdb-example"})
        record: node:cockroachdb_capacity:sum
      - expr: |
          sum without(instance) (node:cockroachdb_capacity:sum{namespace="default",service="cockroachdb-example"})
        record: cluster:cockroachdb_capacity:sum
      - expr: |
          sum without(store) (cockroachdb_capacity_available{namespace="default",service="cockroachdb-example"})
        record: node:cockroachdb_capacity_available:sum
      - expr: |
          sum without(instance) (node:cockroachdb_capacity_available:sum{namespace="default",service="cockroachdb-example"})
        record: cluster:cockroachdb_capacity_available:sum
      - expr: |
          cockroachdb_capacity_available{namespace="default",service="cockroachdb-example"} / cockroachdb_capacity{namespace="default",service="cockroachdb-example"}
        record: :cockroachdb_capacity_available:ratio
      - expr: |
          node:cockroachdb_capacity_available:sum{namespace="default",service="cockroachdb-example"} / node:cockroachdb_capacity:sum{namespace="default",service="cockroachdb-example"}
        record: node:cockroachdb_capacity_available:ratio
      - expr: |
          cluster:cockroachdb_capacity_available:sum{namespace="default",service="cockroachdb-example"} / cluster:cockroachdb_capacity:sum{namespace="default",service="cockroachdb-example"}
        record: cluster:cockroachdb_capacity_available:ratio
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
    name: cockroachdb-example
    namespace: default
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 26257
      targetPort: 26257
    - name: http
      port: 8080
      targetPort: 8080
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
      prometheus: k8s
    name: cockroachdb-example
    namespace: default
  spec:
    endpoints:
    - metricRelabelings:
      - replacement: cockroachdb_${1}
        sourceLabels:
        - __name__
        targetLabel: __name__
      path: /_status/vars
      port: http
    namespaceSelector:
      matchNames:
      - default
    selector:
      matchLabels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: example
        app.kubernetes.io/name: cockroachdb-example
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example-public
    name: cockroachdb-example-public
    namespace: default
  spec:
    ports:
    - name: grpc
      port: 26257
      targetPort: 26257
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: cockroachdb-example
    name: cockroachdb-example
    namespace: default
  spec:
    podManagementPolicy: Parallel
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: example
        app.kubernetes.io/name: cockroachdb-example
    serviceName: cockroachdb-example
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database
          app.kubernetes.io/instance: example
          app.kubernetes.io/name: cockroachdb-example
        name: cockroachdb-example
        namespace: default
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - cockroachdb-example
                namespaces:
                - default
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - command:
          - /bin/bash
          - -ecx
          - exec /cockroach/cockroach start --logtostderr=WARNING --insecure --advertise-host=$(hostname -f) --http-host=0.0.0.0 --join=cockroachdb-example-0.cockroachdb-example.default.svc --cache=25% --max-sql-memory=25%
          env:
          - name: COCKROACH_CHANNEL
            value: kubernetes-insecure
          image: cockroachdb/cockroach:v20.1.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
          name: cockroachdb
          ports:
          - containerPort: 26257
            name: grpc
          - containerPort: 8080
            name: http
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /health?ready=1
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
          resources: {}
          volumeMounts:
          - mountPath: /cockroach/cockroach-data
            name: datadir
        terminationGracePeriodSeconds: 60
        volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: datadir
    volumeClaimTemplates:
    - metadata:
        name: datadir
        namespace: default
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: standard
kind: List
